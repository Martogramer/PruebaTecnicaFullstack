{"ast":null,"code":"import { getDestinations, createDestination, getDestinationById, searchDestinations, deleteDestination } from '../../services/api';\nimport { FETCH_DESTINATIONS, ADD_DESTINATION, FETCH_DESTINATION, SEARCH_DESTINATIONS, DELETE_DESTINATION_SUCCESS } from '../../types/destinationTypes';\n\n// Acción para obtener todos los destinos turísticos\nexport const fetchDestinations = () => async dispatch => {\n  const destinations = await getDestinations();\n  dispatch({\n    type: FETCH_DESTINATIONS,\n    payload: destinations\n  });\n};\n\n// Acción para crear un nuevo destino turístico\nexport const addDestination = destination => async dispatch => {\n  const newDestination = await createDestination(destination);\n  dispatch({\n    type: ADD_DESTINATION,\n    payload: newDestination\n  });\n};\n\n// Acción para obtener un destino turístico por su ID\nexport const fetchDestination = _id => async dispatch => {\n  const destination = await getDestinationById(_id);\n  dispatch({\n    type: FETCH_DESTINATION,\n    payload: destination\n  });\n};\n\n// Acción para buscar destinos turísticos por nombre o ubicación\nexport const searchDestination = query => async dispatch => {\n  const destinations = await searchDestinations(query);\n  dispatch({\n    type: SEARCH_DESTINATIONS,\n    payload: destinations\n  });\n};\n\n// accion para eliminar por id:\nexport const deleteDestinationByID = id => async dispatch => {\n  const deleteDest = deleteDestination(id);\n  dispatch({\n    type: DELETE_DESTINATION_SUCCESS,\n    payload: deleteDest\n  });\n};","map":{"version":3,"names":["getDestinations","createDestination","getDestinationById","searchDestinations","deleteDestination","FETCH_DESTINATIONS","ADD_DESTINATION","FETCH_DESTINATION","SEARCH_DESTINATIONS","DELETE_DESTINATION_SUCCESS","fetchDestinations","dispatch","destinations","type","payload","addDestination","destination","newDestination","fetchDestination","_id","searchDestination","query","deleteDestinationByID","id","deleteDest"],"sources":["C:/Users/luism/OneDrive/Escritorio/projects/PruebaTecnicaFullstack/client/data-traveler/src/state/actions/destinationActions.js"],"sourcesContent":["import {\r\n    getDestinations,\r\n    createDestination,\r\n    getDestinationById,\r\n    searchDestinations,\r\n    deleteDestination\r\n  } from '../../services/api';\r\n  import {\r\n    FETCH_DESTINATIONS,\r\n    ADD_DESTINATION,\r\n    FETCH_DESTINATION,\r\n    SEARCH_DESTINATIONS,\r\n    DELETE_DESTINATION_SUCCESS\r\n  } from '../../types/destinationTypes';\r\n  \r\n  // Acción para obtener todos los destinos turísticos\r\n  export const fetchDestinations = () => async (dispatch) => {\r\n    const destinations = await getDestinations();\r\n    dispatch({ type: FETCH_DESTINATIONS, payload: destinations });\r\n  };\r\n  \r\n  // Acción para crear un nuevo destino turístico\r\n  export const addDestination = (destination) => async (dispatch) => {\r\n    const newDestination = await createDestination(destination);\r\n    dispatch({ type: ADD_DESTINATION, payload: newDestination });\r\n  };\r\n  \r\n  // Acción para obtener un destino turístico por su ID\r\n  export const fetchDestination = (_id) => async (dispatch) => {\r\n    const destination = await getDestinationById(_id);\r\n    dispatch({ type: FETCH_DESTINATION, payload: destination });\r\n  };\r\n  \r\n  // Acción para buscar destinos turísticos por nombre o ubicación\r\n  export const searchDestination = (query) => async (dispatch) => {\r\n    const destinations = await searchDestinations(query);\r\n    dispatch({ type: SEARCH_DESTINATIONS, payload: destinations });\r\n  };\r\n  \r\n  // accion para eliminar por id:\r\n  export const deleteDestinationByID = (id) => async (dispatch) => {\r\n    const deleteDest = deleteDestination(id);\r\n        dispatch({ type: DELETE_DESTINATION_SUCCESS, payload: deleteDest });\r\n  };"],"mappings":"AAAA,SACIA,eAAe,EACfC,iBAAiB,EACjBC,kBAAkB,EAClBC,kBAAkB,EAClBC,iBAAiB,QACZ,oBAAoB;AAC3B,SACEC,kBAAkB,EAClBC,eAAe,EACfC,iBAAiB,EACjBC,mBAAmB,EACnBC,0BAA0B,QACrB,8BAA8B;;AAErC;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACzD,MAAMC,YAAY,GAAG,MAAMZ,eAAe,CAAC,CAAC;EAC5CW,QAAQ,CAAC;IAAEE,IAAI,EAAER,kBAAkB;IAAES,OAAO,EAAEF;EAAa,CAAC,CAAC;AAC/D,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAIC,WAAW,IAAK,MAAOL,QAAQ,IAAK;EACjE,MAAMM,cAAc,GAAG,MAAMhB,iBAAiB,CAACe,WAAW,CAAC;EAC3DL,QAAQ,CAAC;IAAEE,IAAI,EAAEP,eAAe;IAAEQ,OAAO,EAAEG;EAAe,CAAC,CAAC;AAC9D,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAIC,GAAG,IAAK,MAAOR,QAAQ,IAAK;EAC3D,MAAMK,WAAW,GAAG,MAAMd,kBAAkB,CAACiB,GAAG,CAAC;EACjDR,QAAQ,CAAC;IAAEE,IAAI,EAAEN,iBAAiB;IAAEO,OAAO,EAAEE;EAAY,CAAC,CAAC;AAC7D,CAAC;;AAED;AACA,OAAO,MAAMI,iBAAiB,GAAIC,KAAK,IAAK,MAAOV,QAAQ,IAAK;EAC9D,MAAMC,YAAY,GAAG,MAAMT,kBAAkB,CAACkB,KAAK,CAAC;EACpDV,QAAQ,CAAC;IAAEE,IAAI,EAAEL,mBAAmB;IAAEM,OAAO,EAAEF;EAAa,CAAC,CAAC;AAChE,CAAC;;AAED;AACA,OAAO,MAAMU,qBAAqB,GAAIC,EAAE,IAAK,MAAOZ,QAAQ,IAAK;EAC/D,MAAMa,UAAU,GAAGpB,iBAAiB,CAACmB,EAAE,CAAC;EACpCZ,QAAQ,CAAC;IAAEE,IAAI,EAAEJ,0BAA0B;IAAEK,OAAO,EAAEU;EAAW,CAAC,CAAC;AACzE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}